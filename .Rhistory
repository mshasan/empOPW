grpSize = 2000
g <- list()
for(j in 1:5)
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- tibble(pvalPerGrp)
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = pvalPerGrp)) +
geom_histogram(colour = barlines, fill = "#4281AE", binwidth = 0.025,
boundary = 0) +
geom_vline(xintercept = .025, size = 1, col = "red4")
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[2]], g[[3]], g[[4]], g[[5]],
labels = letters[1:6], ncol = 3)
p
g <- list()
for(j in 1:5)
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- tibble(pvalPerGrp)
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = pvalPerGrp)) +
geom_histogram(colour = barlines, fill = "#4281AE", binwidth = 0.025,
boundary = 0) +
geom_vline(xintercept = .025, size = 1, col = "red2")
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[2]], g[[3]], g[[4]], g[[5]],
labels = letters[1:6], ncol = 3)
p
# dist of five groups p-values-----------
barlines <- "#1F3553"
grpSize = 2000
g <- list()
for(j in 1:5)
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- tibble(pvalPerGrp)
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = pvalPerGrp)) +
geom_histogram(colour = barlines, fill = "#4281AE", binwidth = 0.025,
boundary = 0) +
geom_vline(xintercept = .025, size = 1, col = "red2")
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[2]], g[[3]], g[[4]], g[[5]],
labels = letters[1:6], ncol = 3)
p
g <- list()
for(j in 1:5)
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- tibble(pvalPerGrp)
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = pvalPerGrp)) +
geom_histogram(colour = barlines, fill = "#4281AE", binwidth = 0.025,
boundary = 0) +
geom_vline(xintercept = .025, size = 1, col = "red2")+
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[2]], g[[3]], g[[4]], g[[5]],
labels = letters[1:6], ncol = 3)
p
g <- list()
for(j in 1:5)
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- tibble(pvalPerGrp)
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = pvalPerGrp)) +
geom_histogram(colour = barlines, fill = "#4281AE", binwidth = 0.025,
boundary = 0) +
#geom_vline(xintercept = .025, size = 1, col = "red2")+
geom_histogram(data = subset(pvalPerGrp_dat, cond==TRUE),
binwidth = 0.025, fill = "red2")
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[2]], g[[3]], g[[4]], g[[5]],
labels = letters[1:6], ncol = 3)
grpSize = 2000
g <- list()
for(j in 1:5)
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- data.frame(pvalPerGrp)
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = pvalPerGrp)) +
geom_histogram(colour = barlines, fill = "#4281AE", binwidth = 0.025,
boundary = 0) +
#geom_vline(xintercept = .025, size = 1, col = "red2")+
geom_histogram(data = subset(pvalPerGrp_dat, cond==TRUE),
binwidth = 0.025, fill = "red2")
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[2]], g[[3]], g[[4]], g[[5]],
labels = letters[1:6], ncol = 3)
df <- data.frame(wins=c(1,1,3,1,1,2,11,2,11,15,1,1,3))
df
tail(df,1)
tail(df,1)$wins
df$wins == tail(df,1)$wins
?geom_histogram
rand <- sample(1:500, 1200, replace=T)
dat <- data.frame(val=c(rand), name=c(rep("A",400),rep("B",400),rep("C",400)))
dat$cond <- ifelse(dat$val < 100 & dat$name=="B", "remove", dat$name)
dat
barlines <- "#1F3553"
grpSize = 2000
g <- list()
for(j in 1:5)
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- data.frame(pvalPerGrp)
colors <- c(rep("red2", 1), rep("#1F3553", 39))
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = pvalPerGrp)) +
geom_histogram(colour = barlines, fill = colors, binwidth = 0.025,
boundary = 0) +
#geom_vline(xintercept = .025, size = 1, col = "red2")+
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[2]], g[[3]], g[[4]], g[[5]],
labels = letters[1:6], ncol = 3)
p
hist_pval <- ggplot(Data, aes_string(x = Data$pvals)) +
geom_histogram(colour = "#1F9553", fill = "#4281AE", binwidth = 0.025,
boundary = 0) +
labs(x = "P-values")
hist_pval
# ordered by covariate---------
OD <- Data[order(filters, decreasing = TRUE), ]
OD_pavlue <- OD$pvals
# dist of five groups p-values-----------
barlines <- "#1F3553"
grpSize = 2000
g <- list()
for(j in 1:5)
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- data.frame(pvalPerGrp)
colors <- c(rep("red2", 1), rep("#4281AE", 39))
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = pvalPerGrp)) +
geom_histogram(colour = "#1F9553", fill = colors, binwidth = 0.025,
boundary = 0) +
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[2]], g[[3]], g[[4]], g[[5]],
labels = letters[1:6], ncol = 3)
p
# dist of five groups p-values-----------
grpSize = 2000
g <- list()
for(j in 1:5)
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- data.frame(pvalPerGrp)
colors <- c(rep("red2", 1), rep("#4281AE", 39))
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = pvalPerGrp)) +
geom_histogram(colour = "#1F3553", fill = colors, binwidth = 0.025,
boundary = 0) +
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[2]], g[[3]], g[[4]], g[[5]],
labels = letters[1:6], ncol = 3)
p
1-pnorm(.025)
1-pnorm(.05)
1-qnorm(.05)
1-qnorm(.025)
qnorm(1-.025)
relative_freq <- function(bin_idx = 1L, h_breaks = 20L, obs)
{
bin <- c(0, (1:h_breaks)/h_breaks)
bin.counts <- tabulate(cut(obs, bin))
rel_freq_all = bin.counts/sum(bin.counts)
rel_freq_one = rel_freq_all[bin_idx]
return(rel_freq_one)
}
X = runif(1000, min = 0, max = 2)         # covariate
relative_freq(bin_idx = 1, h_breaks = 20, obs = X)
rf <- relative_freq(bin_idx = 1, h_breaks = 20, obs = X)
rf
h_breaks = 20
obs = X
bin <- c(0, (1:h_breaks)/h_breaks)
bin.counts <- tabulate(cut(obs, bin))
bin
bin.counts
rel_freq_all = bin.counts/sum(bin.counts)
rel_freq_one = rel_freq_all[bin_idx]
rel_freq_all
relative_freq <- function(bin_idx = 1L, h_breaks = 20L, obs)
{
bin <- c(0, (1:h_breaks)/h_breaks)
bin.counts <- tabulate(cut(obs, bin))
rel_freq_all = bin.counts/sum(bin.counts)
rel_freq_one = rel_freq_all[bin_idx]
return(list(rf = rel_freq_all, rf_one = rel_freq_one))
}
X = runif(1000, min = 0, max = 2)         # covariate
r_freq <- relative_freq(bin_idx = 1, h_breaks = 20, obs = X)
r_freq
relative_freq(bin_idx = 1, h_breaks = h_breaks,
obs = pval_perGrp)$rf_one
pval_perGrp <- OD_pvalue[(grp*grpSize - grpSize + 1):(grp*grpSize)]
pval_perGrp=X
relative_freq(bin_idx = 1, h_breaks = h_breaks,
obs = pval_perGrp)$rf_one
library(empOPW)
library(empOPW)
library(OPWeight)
library(OPWpaper)
library(empOPW)
library(MASS)
library(qvalue)
library(limma)
library(splines)
library(DESeq2)
#install.packages("mvnfast")
library(mvnfast)		# fast generate multi variate normal
#source("https://bioconductor.org/biocLite.R")
#biocLite("IHW")
library("IHW")		# independent hypotheis weight
library(ggplot2)
library(reshape2)
library(cowplot)
library(tibble)
m <- 10000
null = .8
set.seed(123)
filters <- runif(m, min = 0, max = 3)          # covariate
H <- rbinom(m, size = 1, prob = 1 - null)      # alternative hypothesis true or false
tests <- rnorm(m, mean = H*filters)            # Z-score
pvals <- pnorm(tests, lower.tail = FALSE)
Data <- tibble(pvals, filters)
# dist. of alp-values-------
hist_pval <- ggplot(Data, aes_string(x = Data$pvals)) +
geom_histogram(colour = "#1F9553", fill = "#4281AE", binwidth = 0.025,
boundary = 0) +
labs(x = "P-values")
# ordered by covariate---------
OD <- Data[order(filters, decreasing = TRUE), ]
OD_pavlue <- OD$pvals
# dist of five groups p-values-----------
grpSize = 2000
g <- list()
for(j in 1:5)
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- data.frame(pvalPerGrp)
colors <- c(rep("red2", 1), rep("#4281AE", 39))
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = pvalPerGrp)) +
geom_histogram(colour = "#1F3553", fill = colors, binwidth = 0.025,
boundary = 0) +
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[2]], g[[3]], g[[4]], g[[5]],
labels = letters[1:6], ncol = 3)
p
ranksProb1 = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters, group = 5,
h_breaks = 41, bin_idx = 1, effectType = "continuous")
plot(1:5, ranksProb1, type="l", xlab = "ranks", ylab = "P(rank | effect)")
par(mfrow=c(2,4))
for(i in c(1, 2, 3, 5, 10, 20, 40))
{
ranksProb = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters, group = 5,
h_breaks = 41, bin_idx = 1, effectType = "continuous")
plot(1:5, ranksProb, type="l", xlab = "ranks", ylab = "P(rank | effect)")
}
# ranks proabilities of the different effect sizes---------
par(mfrow=c(2,4))
for(i in c(1, 2, 3, 5, 10, 20, 40))
{
ranksProb = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters, group = 5,
h_breaks = 41, bin_idx = i, effectType = "continuous")
plot(1:5, ranksProb, type="l", xlab = "ranks", ylab = "P(rank | effect)")
}
m <- 100000
null = .8
set.seed(123)
filters <- runif(m, min = 0, max = 3)          # covariate
H <- rbinom(m, size = 1, prob = 1 - null)      # alternative hypothesis true or false
tests <- rnorm(m, mean = H*filters)            # Z-score
pvals <- pnorm(tests, lower.tail = FALSE)
Data <- tibble(pvals, filters)
# dist. of all p-values-------
hist_pval <- ggplot(Data, aes_string(x = Data$pvals)) +
geom_histogram(colour = "#1F9553", fill = "#4281AE", binwidth = 0.025,
boundary = 0) +
labs(x = "P-values")
# ordered by covariate---------
OD <- Data[order(filters, decreasing = TRUE), ]
OD_pavlue <- OD$pvals
# dist of five groups p-values-----------
grpSize = 1000
g <- list()
for(j in 1:5)
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- data.frame(pvalPerGrp)
colors <- c(rep("red2", 1), rep("#4281AE", 39))
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = pvalPerGrp)) +
geom_histogram(colour = "#1F3553", fill = colors, binwidth = 0.025,
boundary = 0) +
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[2]], g[[3]], g[[4]], g[[5]],
labels = letters[1:6], ncol = 3)
# dist of five groups p-values-----------
grpSize = 1000
g <- list()
for(j in c(1, 5, 15, 25, 50, 75, 100))
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- data.frame(pvalPerGrp)
colors <- c(rep("red2", 1), rep("#4281AE", 39))
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = pvalPerGrp)) +
geom_histogram(colour = "#1F3553", fill = colors, binwidth = 0.025,
boundary = 0) +
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[2]], g[[3]], g[[4]], g[[5]], g[[6]], g[[7]]
labels = letters[1:6], ncol = 3)
p <- plot_grid(hist_pval, g[[1]], g[[2]], g[[3]], g[[4]], g[[5]], g[[6]], g[[7]]
labels = letters[1:8], ncol = 4)
p <- plot_grid(hist_pval, g[[1]], g[[2]], g[[3]], g[[4]], g[[5]], g[[6]], g[[7]],
labels = letters[1:8], ncol = 4)
p
# dist of five groups p-values-----------
grpSize = 1000
g <- list()
for(j in c(1, 5, 15, 25, 50, 75, 100))
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- data.frame(pvalPerGrp)
colors <- c(rep("red2", 1), rep("#4281AE", 39))
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = pvalPerGrp)) +
geom_histogram(colour = "#1F3553", fill = colors, binwidth = 0.025,
boundary = 0) +
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[2]], g[[3]], g[[4]], g[[5]], g[[6]], g[[7]],
labels = letters[1:8], ncol = 4)
p
dim(Data)
# dist. of all p-values-------
hist_pval <- ggplot(Data, aes_string(x = Data$pvals)) +
geom_histogram(colour = "#1F9553", fill = "#4281AE", binwidth = 0.025,
boundary = 0) +
labs(x = "P-values")
# ordered by covariate---------
OD <- Data[order(filters, decreasing = TRUE), ]
OD_pavlue <- OD$pvals
# dist of five groups p-values-----------
grpSize = 1000
g <- list()
for(j in c(1, 5, 15, 25, 50, 75, 100))
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- data.frame(pvalPerGrp)
colors <- c(rep("red2", 1), rep("#4281AE", 39))
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = pvalPerGrp)) +
geom_histogram(colour = "#1F3553", fill = colors, binwidth = 0.025,
boundary = 0) +
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[2]], g[[3]], g[[4]], g[[5]], g[[6]], g[[7]],
labels = letters[1:8], ncol = 4)
p
g[[1]]
g[[2]]
p <- plot_grid(hist_pval, g[[1]], g[[5]], g[[15]], g[[25]], g[[50]], g[[75]], g[[100]],
labels = letters[1:8], ncol = 4)
p
# ranks proabilities of the different effect sizes---------
par(mfrow=c(2,4))
for(i in c(1, 2, 3, 5, 10, 20, 40))
{
ranksProb = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters, group = 100,
h_breaks = 41, bin_idx = i, effectType = "continuous")
plot(1:100, ranksProb, type="l", xlab = "ranks", ylab = "P(rank | effect)")
}
ranksProb
library(empOPW)
prob_rank_givenEffect_emp
# ranks proabilities of the different effect sizes---------
par(mfrow=c(2,4))
for(i in c(1, 2, 3, 5, 10, 20, 40))
{
ranksProb = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters, group = 100,
h_breaks = 41, bin_idx = i, smooth=FALSE, effectType = "continuous")
plot(1:100, ranksProb, type="l", xlab = "ranks", ylab = "P(rank | effect)")
}
# ranks proabilities of the different effect sizes---------
par(mfrow=c(2,4))
for(i in c(1, 2, 3, 5, 10, 20, 40))
{
ranksProb = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters, group = 100,
h_breaks = 41, bin_idx = i, effectType = "continuous")
plot(1:100, ranksProb, type="l", xlab = "ranks", ylab = "P(rank | effect)")
}
ranksProb <- data.frame(ranksProb)
ranksProb_dat <- data.frame(ranks = 1:100, ranksProb)
ranksProb_dat
# ranks proabilities of the different effect sizes---------
g_prob <- list()
for(i in c(1, 2, 3, 5, 10, 20, 40))
{
ranksProb = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters, group = 100,
h_breaks = 41, bin_idx = i, effectType = "continuous")
ranksProb_dat <- data.frame(ranks = 1:100, ranksProb)
g_prob[[i]] <- ggplot(ranksProb_dat, aes(x = ranks, y = ranksProb)) +
geom_line(size = 1.5, col="firebrick4") +
labs(x = "Test rank" , y = "p(rank | effect)")
}
# ranks proabilities of the different effect sizes---------
g_prob <- list()
for(i in c(1, 2, 3, 5, 10, 20, 40))
{
ranksProb = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters, group = 100,
h_breaks = 41, bin_idx = i, effectType = "continuous")
ranksProb_dat <- data.frame(ranks = 1:100, ranksProb)
g_prob[[i]] <- ggplot(ranksProb_dat, aes(x = ranks, y = ranksProb)) +
geom_line(size = 1.5, col="firebrick4") +
labs(x = "Test rank" , y = "p(rank | effect)")
}
p_prob <- plot_grid(g_prob[[1]], g_prob[[2]], g_prob[[3]], g_prob[[5]],
g_prob[[10]], g_prob[[20]], g_prob[[40]],
labels = letters[1:7], ncol = 4)
p_prob
ranksProb_bin = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters,
group = 100, effectType = "binary")
ranksProb_bin_dat <- data.frame(ranks = 1:100, ranksProb_bin)
g_prob_bin <- ggplot(ranksProb_bin_dat, aes(x = ranks, y = ranksProb)) +
geom_line(size = 1.5, col="firebrick4") +
labs(x = "Test rank" , y = "p(rank | effect)")
p_prob <- plot_grid(g_prob[[1]], g_prob[[2]], g_prob[[3]], g_prob[[5]],
g_prob[[10]], g_prob[[20]], g_prob[[40]], g_prob_bin,
labels = letters[1:8], ncol = 4)
p_prob
ranksProb_bin
ranksProb_bin_dat
g_prob_bin
ranksProb_bin = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters,
group = 100, effectType = "binary")
ranksProb_bin_dat <- data.frame(ranks = 1:100, ranksProb_bin)
g_prob_bin <- ggplot(ranksProb_bin_dat, aes_string(x = "ranks", y = "ranksProb_bin")) +
geom_line(size = 1.5, col="firebrick4") +
labs(x = "Test rank" , y = "p(rank | effect)")
p_prob <- plot_grid(g_prob[[1]], g_prob[[2]], g_prob[[3]], g_prob[[5]],
g_prob[[10]], g_prob[[20]], g_prob[[40]], g_prob_bin,
labels = letters[1:8], ncol = 4)
p_prob
# ranks proabilities of the different effect sizes---------
g_prob <- list()
for(i in c(1, 2, 3, 5, 10, 20, 40))
{
ranksProb = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters, group = 100,
h_breaks = 41, bin_idx = i, effectType = "continuous")
ranksProb_dat <- data.frame(ranks = 1:100, ranksProb)
g_prob[[i]] <- ggplot(ranksProb_dat, aes_string(x = "ranks", y = "ranksProb")) +
geom_line(size = 1.5, col="firebrick4") +
labs(x = "Test rank" , y = "p(rank | effect)")
}
ranksProb_bin = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters,
group = 100, effectType = "binary")
ranksProb_bin_dat <- data.frame(ranks = 1:100, ranksProb_bin)
g_prob_bin <- ggplot(ranksProb_bin_dat, aes_string(x = "ranks", y = "ranksProb_bin")) +
geom_line(size = 1.5, col="firebrick4") +
labs(x = "Test rank" , y = "p(rank | effect)")
p_prob <- plot_grid(g_prob[[1]], g_prob[[2]], g_prob[[3]], g_prob[[5]],
g_prob[[10]], g_prob[[20]], g_prob[[40]], g_prob_bin,
labels = letters[1:8], ncol = 4)
# dist. of all p-values-------
hist_pval <- ggplot(Data, aes_string(x = "pvals")) +
geom_histogram(colour = "#1F9553", fill = "#4281AE", binwidth = 0.025,
boundary = 0) +
labs(x = "P-values")
# ordered by covariate---------
OD <- Data[order(filters, decreasing = TRUE), ]
OD_pavlue <- OD$pvals
# dist of five groups p-values-----------
grpSize = 1000
g <- list()
for(j in c(1, 5, 15, 25, 50, 75, 100))
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- data.frame(pvalPerGrp)
colors <- c(rep("red2", 1), rep("#4281AE", 39))
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = "pvalPerGrp")) +
geom_histogram(colour = "#1F3553", fill = colors, binwidth = 0.025,
boundary = 0) +
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[5]], g[[15]], g[[25]], g[[50]], g[[75]], g[[100]],
labels = letters[1:8], ncol = 4)
# ranks proabilities of the different effect sizes---------
g_prob <- list()
for(i in c(1, 2, 3, 5, 10, 20, 40))
{
ranksProb = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters, group = 100,
h_breaks = 41, bin_idx = i, effectType = "continuous")
ranksProb_dat <- data.frame(ranks = 1:100, ranksProb)
g_prob[[i]] <- ggplot(ranksProb_dat, aes_string(x = "ranks", y = "ranksProb")) +
geom_line(size = 1.5, col="firebrick4") +
labs(x = "Test rank" , y = "p(rank | effect)")
}
ranksProb_bin = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters,
group = 100, effectType = "binary")
ranksProb_bin_dat <- data.frame(ranks = 1:100, ranksProb_bin)
g_prob_bin <- ggplot(ranksProb_bin_dat, aes_string(x = "ranks", y = "ranksProb_bin")) +
geom_line(size = 1.5, col="firebrick4") +
labs(x = "Test rank" , y = "p(rank | effect)")
p_prob <- plot_grid(g_prob[[1]], g_prob[[2]], g_prob[[3]], g_prob[[5]],
g_prob[[10]], g_prob[[20]], g_prob[[40]], g_prob_bin,
labels = letters[1:8], ncol = 4)
p
p_prob
