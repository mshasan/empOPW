{
    "collab_server" : "",
    "contents" : "#' @title Emperical probbaility of the rank of test given effect size\n#'\n#' @description Emperical comnputation of the probability of the rank of a test being\n#' higher than any other test given the effect size from external information.\n#' @param group number of groups\n#' @param pvalue vector of test pvalues\n#' @param filterStat vector of filter statistics\n#' @param effectType type of effect size c(\"binary\",\"continuous\")\n#'\n#' @details If one wants to test \\deqn{H_0: \\epsilion_i=0 vs. H_a: \\epsilion_i > 0,}\n#' then \\code{et}  and \\code{ey} should be mean of the test and filter effect sizes,\n#' respectively. This is called hypothesis testing for the continuous effect sizes.\n#' If one wants to test \\deqn{H_0: \\epsilion_i=0 vs. H_a: \\epsilion_i = \\epsilion,}\n#' then \\code{et} and \\code{ey} should be median or any discrete value of the\n#' test and filter effect sizes. This is called hypothesis testing for the Binary\n#' effect sizes\n#' @author Mohamad S. Hasan, mshasan@uga.edu\n#' @export\n#' @import stats\n#' @seealso \\code{\\link{qvalue}} \\code{\\link{runif}} \\code{\\link{rnorm}}\n#' @return \\code{prob} emperical probability of the rank of the test\n#' @examples\n#'\n#' # generating data (known in practice)\n#' pvalue <- runif(100000)\n#' filterStat <- rnorm(100000)\n#'\n#' # apply the function to compute the rank proabbility\n#' group=10\n#' ranksProb=sapply(group,prob_rank_givenEffect_emp, pvalue, filterStat,\n#'                        effectType=\"continuous\")\n#'\n#' # plot the probability\n#' plot(1:group,ranksProb,type=\"l\",lwd=2,xlab=\"ranks\",ylab=\"P(rank|effect)\")\n#'\n#===============================================================================\n# function to compute p(rank=k|filterEffect=ey) emperically\n\n# Input:-----\n# group = number of groups\n# pvalue = vector of test pvalues\n# filterStat = vector of filter statistics\n# effectType = type of effect size c(\"binary\",\"continuous\")\n\n# internal parameters:-----\n# groupSize = number of pvalues per group\n# Data = a data frame of pvalue and filter statistics\n# OD = ordered data by the fitler statsistics\n# OD_pvalue = ordered pvaluse by the fitler statistics\n# pvalue_perGroup = vector of pvalues per group\n# fun.prob = funtion to compute probability for each group\n# prob = proability for each group\n# h = compute density from histogram\n# probAll = normalized density for all points but we need only the first\n\n# output:-----\n# probVec = normalized probability of rank given effect size, p(rank=k|effect=ey)\n#===============================================================================\nprob_rank_givenEffect_emp <- function(group = 5L, pvalue, filterStat,\n                                      effectType = c(\"binary\", \"continuous\"))\n{\n    groupSize <- ceiling(length(pvalue)/group)\n    Data <- data.frame(pvalue, filterStat)\n    OD <- Data[order(Data$filterStat, decreasing=T), ]\n    OD_pvalue <- OD$pvalue\n\n    fun.prob <- function(group)\n    {\n        pvalue_perGroup <- OD_pvalue[(group*groupSize-groupSize+1):(group*groupSize)]\n\n        if(effectType==\"binary\"){\n            prob <- 1-qvalue(p = pvalue_perGroup, pfdr = TRUE, pi0.method=\"bootstrap\",\n                             lambda = max(pvalue_perGroup))$pi0\n        } else {\n            h <- hist(pvalue_perGroup, freq = FALSE, breaks=seq(0,1,length=11))$density\n            probAll = h/sum(h)\n            prob = probAll[1]\n        }\n    return(prob)\n    }\n    probVec <- sapply(1:group, fun.prob)\n    return(probVec/sum(probVec))\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "created" : 1493935887251.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "1687978260",
    "id" : "894CF1A",
    "lastKnownWriteTime" : 1493937224,
    "last_content_update" : 1493937224600,
    "path" : "C:/Users/Apu-Jerrica/Google Drive/My R Packages/empOPW/R/prob_rank_givenEffect_emp.R",
    "project_path" : "R/prob_rank_givenEffect_emp.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}