p_prob_wgt
p_prob_wgt <- plot_grid(g_prob, g_wgt, g_weight, g_weight_grps,
NULL, legend_null, NULL, legend_grp, rel_heights = c(10,.2),
labels = letters[1:4], ncol=4)
p_prob_wgt
p_prob_wgt <- plot_grid(g_prob, g_wgt, g_weight, g_weight_grps,
NULL, legend_null, NULL, legend_grp, rel_heights = c(7,.1),
labels = letters[1:4], ncol=4)
p_prob_wgt
p_prob_wgt <- plot_grid(g_prob, g_wgt, g_weight, g_weight_grps,
NULL, legend_null, NULL, legend_grp,
rel_heights = c(7,.1), align = 'hv', labels = letters[1:4], ncol=4)
p_prob_wgt <- plot_grid(g_prob, g_wgt, g_weight, g_weight_grps,
NULL, legend_null, NULL, legend_grp,
rel_heights = c(7,.1), align = 'v', labels = letters[1:4], ncol=4)
p_prob_wgt <- plot_grid(g_prob, g_wgt, g_weight, g_weight_grps,
NULL, legend_null, NULL, legend_grp,
rel_heights = c(1,.1), labels = letters[1:4], ncol=4)
p_prob_wgt
p_prob_wgt
nice_plots()
nice_plots
x_vec <- 1:grp
y_matrix = cbind(emp_results.2$ranksProb,
emp_results.5$ranksProb, emp_results.8$ranksProb,
emp_results.95$ranksProb)
xlab = c("ranks", "20%", "50%", "80%", "95%")
xlab
x_names = "ranks"
y_names =  c("20%", "50%", "80%", "95%")
x_vec <- 1:grp
y_matrix = cbind(emp_results.2$ranksProb,
emp_results.5$ranksProb, emp_results.8$ranksProb,
emp_results.95$ranksProb)
x_names = "ranks"
y_names =  c("20%", "50%", "80%", "95%")
dat <- data.frame(x_vec, y_matrix)
x_vec <- 1:grp
dat <- data.frame(x_vec, y_matrix)
x_vec <- 1:10
y_matrix = cbind(emp_results.2$ranksProb,
emp_results.5$ranksProb, emp_results.8$ranksProb,
emp_results.95$ranksProb)
x_names = "ranks"
y_names =  c("20%", "50%", "80%", "95%")
dat <- data.frame(x_vec, y_matrix)
dat
names(dat) <- c(x_names, y_names)
dat
x_lab = "Ranks"
y_lab = "p(rank | effect)"
ranksProb_null_melt <- melt(dat, id.var = x_names, variable.name = ylab)
xlab = "Ranks"
ylab = "p(rank | effect)"
ranksProb_null_melt <- melt(dat, id.var = x_names, variable.name = ylab)
dat_melt <- melt(dat, id.var = x_names, variable.name = ylab)
dat_melt
g_prob <- ggplot(dat_melt, aes_string(x = names(dat_melt)[[1]], y = "value",
group = ylab, colour = ylab)) +
geom_line(size = 1.5) +
labs(x = xlab, y = ylab) +
theme(legend.position="none")
g_plot <- ggplot(dat_melt, aes_string(x = names(dat_melt)[[1]], y = "value",
group = ylab, colour = ylab)) +
geom_line(size = 1.5) +
labs(x = xlab, y = ylab) +
theme(legend.position="none")
g_plot
ylab
x_name = "ranks"
y_names =  c("20%", "50%", "80%", "95%")
dat <- data.frame(x_vec, y_matrix)
names(dat) <- c(x_names, y_names)
xlab = "Ranks"
ylab = "Prob"
dat <- data.frame(x_vec, y_matrix)
names(dat) <- c(x_names, y_names)
dat
dat_melt <- melt(dat, id.var = x_names, variable.name = ylab)
dat_melt
g_plot <- ggplot(dat_melt, aes_string(x = names(dat_melt)[[1]], y = "value",
group = ylab, colour = ylab)) +
geom_line(size = 1.5) +
labs(x = xlab, y = ylab) +
theme(legend.position="none")
g_plot
title = NULL
g_plot <- ggplot(dat_melt, aes_string(x = names(dat_melt)[[1]], y = "value",
group = ylab, colour = ylab)) +
geom_line(size = 1.5) +
labs(x = xlab, y = ylab, title = title) +
theme(legend.position="none")
g_plot
nice_plots2 <- function(x_vec, y_matrix, x_name = NULL, y_names = NULL,
xlab = NULL, ylab = NULL, title = NULL)
{
dat <- data.frame(x_vec, y_matrix)
names(dat) <- c(x_names, y_names)
dat_melt <- melt(dat, id.var = x_names, variable.name = ylab)
g_plot <- ggplot(dat_melt, aes_string(x = names(dat_melt)[[1]], y = "value",
group = ylab, colour = ylab)) +
geom_line(size = 1.5) +
labs(x = xlab, y = ylab, title = title) +
theme(legend.position="none")
return(g_plot)
}
nice_plots2(x_vec=x_vec, y_matrix=y_matrix, x_name = "ranks", y_names = y_names,
xlab = "Ranks", ylab = "p(ranks | effect)", title = NULL)
dat <- data.frame(x_vec, y_matrix)
names(dat) <- c(x_names, y_names)
dat_melt <- melt(dat, id.var = x_names, variable.name = ylab)
g_plot <- ggplot(dat_melt, aes_string(x = names(dat_melt)[[1]], y = "value",
group = ylab, colour = ylab)) +
geom_line(size = 1.5) +
labs(x = xlab, y = ylab, title = title) +
theme(legend.position="none")
nice_plots2 <- function(x_vec, y_matrix, x_name = NULL, y_names = NULL,
xlab = NULL, ylab = NULL, title = NULL)
{
dat <- data.frame(x_vec, y_matrix)
names(dat) <- c(x_names, y_names)
dat_melt <- melt(dat, id.var = x_names, variable.name = ylab)
g_plot <- ggplot(dat_melt, aes_string(x = names(dat_melt)[[1]], y = "value",
group = ylab, colour = ylab)) +
geom_line(size = 1.5) +
labs(x = xlab, y = ylab, title = title) +
theme(legend.position="none")
return(g_plot)
}
nice_plots2(x_vec=x_vec, y_matrix=y_matrix, x_name = "ranks", y_names = y_names,
xlab = "Ranks", ylab = "p(ranks | effect)", title = NULL)
nice_plots2(x_vec=x_vec, y_matrix=y_matrix, x_name = "ranks", y_names = y_names,
xlab = "Ranks", ylab = 'p(ranks | effect)', title = NULL)
nice_plots2(x_vec=x_vec, y_matrix=y_matrix, x_name = "ranks", y_names = y_names,
xlab = "Ranks", ylab = "prob", title = NULL)
nice_plots2(x_vec=x_vec, y_matrix=y_matrix, x_name = "ranks", y_names = y_names,
xlab = "Ranks", ylab = "p(ranks|effect)", title = NULL)
ylab = "p(ranks|effect)"
ylab
nice_plots2(x_vec=x_vec, y_matrix=y_matrix, x_name = "ranks", y_names = y_names,
xlab = "Ranks", ylab = paste0("p(ranks | effect)"), title = NULL)
nice_plots2(x_vec=x_vec, y_matrix=y_matrix, x_name = "ranks", y_names = y_names,
xlab = "Ranks", ylab = "p(ranks | effect)", title = NULL)
dat_melt
dat_melt <- melt(dat, id.var = x_names, variable.name = y_cmn)
dat_melt
dat <- data.frame(x_vec, y_matrix)
dat
names(dat) <- c(x_names, y_names)
dat
dat_melt <- melt(dat, id.var = x_names, variable.name = y_cmn)
dat_melt <- melt(dat, id.var = x_names, variable.name = "y_comn")
dat_melt
nice_plots2 <- function(x_vec, y_matrix, x_name = NULL, y_names = NULL,
xlab = NULL, ylab = NULL, title = NULL)
{
dat <- data.frame(x_vec, y_matrix)
names(dat) <- c(x_names, y_names)
dat_melt <- melt(dat, id.var = x_names, variable.name = "y_comn")
g_plot <- ggplot(dat_melt, aes_string(x = names(dat_melt)[[1]], y = "value",
group = "y_comn", colour = "y_comn")) +
geom_line(size = 1.5) +
labs(x = xlab, y = ylab, title = title) +
theme(legend.position = "none")
return(g_plot)
}
nice_plots2(x_vec = x_vec, y_matrix = y_matrix, x_name = "ranks",
y_names = c("20%", "50%", "80%", "95%"),
xlab = "Ranks", ylab = "p(ranks | effect)", title = NULL)
ranksProb_null <- data.frame(emp_results.2$ranksProb, emp_results.5$ranksProb,
emp_results.8$ranksProb, emp_results.95$ranksProb)
g_prob <- nice_plots2(x_vec = 1:grps, y_matrix = ranksProb_null,
x_name = "ranks", y_names = c("20%", "50%", "80%", "95%"),
xlab = "Ranks", ylab = "p(ranks | effect)", title = NULL)
g_prob
grps = 10
m <- 10000
set.seed(123)
filters <- runif(m, min = 0, max = 3)          # covariate
# plots by null proportion-----------
null = .2
H <- rbinom(m, size = 1, prob = 1 - null)      # alternative hypothesis true or false
tests <- rnorm(m, mean = H*filters)            # Z-score
pvals <- pnorm(tests, lower.tail = FALSE)
emp_results.2 <- empOPW(pvalue = pvals, filter = filters, group = grps, max.group = NULL,
h_breaks = 21, effectType = "continuous", method = "BH")
null = .5
H <- rbinom(m, size = 1, prob = 1 - null)      # alternative hypothesis true or false
tests <- rnorm(m, mean = H*filters)            # Z-score
pvals <- pnorm(tests, lower.tail = FALSE)
emp_results.5 <- empOPW(pvalue = pvals, filter = filters, group = grps, max.group = NULL,
h_breaks = 21, effectType = "continuous", method = "BH")
null = .8
H <- rbinom(m, size = 1, prob = 1 - null)      # alternative hypothesis true or false
tests <- rnorm(m, mean = H*filters)            # Z-score
pvals <- pnorm(tests, lower.tail = FALSE)
emp_results.8 <- empOPW(pvalue = pvals, filter = filters, group = grps, max.group = NULL,
h_breaks = 21, effectType = "continuous", method = "BH")
null = .95
H <- rbinom(m, size = 1, prob = 1 - null)      # alternative hypothesis true or false
tests <- rnorm(m, mean = H*filters)            # Z-score
pvals <- pnorm(tests, lower.tail = FALSE)
emp_results.95 <- empOPW(pvalue = pvals, filter = filters, group = grps, max.group = NULL,
h_breaks = 21, effectType = "continuous", method = "BH")
ranksProb_null <- data.frame(emp_results.2$ranksProb, emp_results.5$ranksProb,
emp_results.8$ranksProb, emp_results.95$ranksProb)
g_prob <- nice_plots2(x_vec = 1:grps, y_matrix = ranksProb_null,
x_name = "ranks", y_names = c("20%", "50%", "80%", "95%"),
xlab = "Ranks", ylab = "p(ranks | effect)", title = NULL)
g_prob
wgt_null <- data.frame(emp_results.2$group_wgt, emp_results.5$group_wgt,
emp_results.8$group_wgt, emp_results.95$group_wgt)
g_wgt <- nice_plots2(x_vec = 1:grps, y_matrix = wgt_null,
x_name = "ranks", y_names = c("20%", "50%", "80%", "95%"),
xlab = "Ranks", ylab = "Weight", title = NULL)
g_wgt
weight_all_null <- data.frame(tests = 1:m, emp_results.2$weight,
emp_results.5$weight, emp_results.8$weight,
emp_results.95$weight)
g_weight <- nice_plots2(x_vec = 1:m, y_matrix = weight_all_null,
x_name = "Tests", y_names = c("20%", "50%", "80%", "95%"),
xlab = "Tests", ylab = "Weight", title = NULL)
g_all_weight <- nice_plots2(x_vec = 1:m, y_matrix = weight_all_null,
x_name = "Tests", y_names = c("20%", "50%", "80%", "95%"),
xlab = "Tests", ylab = "Weight", title = NULL)
g_all_weight
weight_all_null <- data.frame(tests = 1:m, emp_results.2$weight,
emp_results.5$weight, emp_results.8$weight,
emp_results.95$weight)
g_all_weight <- nice_plots2(x_vec = 1:m, y_matrix = weight_all_null,
x_name = "Tests", y_names = c("20%", "50%", "80%", "95%"),
xlab = "Tests", ylab = "Weight", title = NULL)
g_all_weight
weight_all_null
x_vec = 1:m
y_matrix = weight_all_null
dat <- data.frame(x_vec, y_matrix)
names(dat) <- c(x_names, y_names)
dat
weight_all_null <- data.frame(emp_results.2$weight, emp_results.5$weight,
emp_results.8$weight, emp_results.95$weight)
g_all_weight <- nice_plots2(x_vec = 1:m, y_matrix = weight_all_null,
x_name = "Tests", y_names = c("20%", "50%", "80%", "95%"),
xlab = "Tests", ylab = "Weight", title = NULL)
weight_all_null
g_all_weight
legend_null <- get_legend(g_all_weight)
names(weight_null) <- c("tests", "20%", "50%", "80%", "95%")
weight_null_melt <- melt(weight_all_null, id.var = "tests",
variable.name = "nullprop")
g_weight <- ggplot(weight_null_melt, aes_string(x = "tests", y = "value",
group = "nullprop", colour = "nullprop")) +
geom_line(size = 1.5) +
labs(x = "Tests", y = "Weight") +
theme(legend.direction = "horizontal", legend.position = "bottom")
legend_null <- get_legend(g_weight)
g_weight <- g_weight + theme(legend.position="none")
weight_grps <- data.frame(emp_results5$weight, emp_results10$weight,
emp_results15$weight, emp_results20$weight)
g_weight_grps <- nice_plots2(x_vec = 1:m, y_matrix = weight_grps,
x_name = "Tests", y_names = c("grp5", "grp10", "grp20", "grp50"),
xlab = "Tests", ylab = "Weight", title = NULL)
g_weight_grps
names(weight_grps) <- c("tests", "grp5", "grp10", "grp20", "grp50")
weight_grps_melt <- melt(weight_grps, id.var = "tests",
variable.name = "groups")
g_weight_grps <- ggplot(weight_grps_melt, aes_string(x = "tests", y = "value",
group = "groups", colour = "groups")) +
geom_line(size = 1.5) +
labs(x = "Tests", y = "Weight") +
theme(legend.direction = "horizontal", legend.position = "bottom")
legend_grp <- get_legend(g_weight_grps)
g_weight_grps <- g_weight_grps + theme(legend.position="none")
weight_grps <- data.frame(1:m, emp_results5$weight, emp_results10$weight,
emp_results15$weight, emp_results20$weight)
names(weight_grps) <- c("tests", "grp5", "grp10", "grp20", "grp50")
weight_grps_melt <- melt(weight_grps, id.var = "tests",
variable.name = "groups")
g_weight_grps <- ggplot(weight_grps_melt, aes_string(x = "tests", y = "value",
group = "groups", colour = "groups")) +
geom_line(size = 1.5) +
labs(x = "Tests", y = "Weight") +
theme(legend.direction = "horizontal", legend.position = "bottom")
legend_grp <- get_legend(g_weight_grps)
g_weight_grps <- g_weight_grps + theme(legend.position="none")
p_prob_wgt <- plot_grid(g_prob, g_wgt, g_weight, g_weight_grps,
NULL, legend_null, NULL, legend_grp,
rel_heights = c(1,.1), labels = letters[1:4], ncol=4)
p_prob_wgt
library(empOPW)
y_matrix = cbind(runif(10), rnorm(10))
x_vec <- 1:10
y_matrix = cbind(runif(10), rnorm(10))
plt <- nice_plots2(x_vec = x_vec, y_matrix = y_matrix, x_name = "groups",
nice_plots2 <- function(x_vec, y_matrix, x_name = NULL, y_names = NULL,
xlab = NULL, ylab = NULL, title = NULL)
{
dat <- data.frame(x_vec, y_matrix)
names(dat) <- c(x_name, y_names)
dat_melt <- melt(dat, id.var = x_name, variable.name = "y_comn")
g_plot <- ggplot(dat_melt, aes_string(x = names(dat_melt)[[1]], y = "value",
group = "y_comn", colour = "y_comn")) +
geom_line(size = 1.5) +
labs(x = xlab, y = ylab, title = title) +
theme(legend.position = "none")
return(g_plot)
}
plt
y_matrix = cbind(runif(10), rnorm(10))
plt <- nice_plots2(x_vec = x_vec, y_matrix = y_matrix, x_name = "groups",
y_names = c("uniform", "normal"),
xlab = "groups", ylab = "dist", title = "uniform vs. normal")
plt
library(empOPW)
y_matrix = cbind(sort(runif(10)), sort(rnorm(10))
y_matrix = cbind(sort(runif(10)), sort(rnorm(10)))
plt <- nice_plots2(x_vec = x_vec, y_matrix = y_matrix, x_name = "groups",
y_names = c("uniform", "normal"),
xlab = "groups", ylab = "Distribution", title = "uniform vs. normal")
plt
install.packages("pweight")
library(pweight)
getwd()
setwd("U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-1")
#setwd("C:/Users/Apu-Jerrica/Google Drive/UGA/My R Packages/OPWeight")
library(stringi)
library(OPWeight)       # library for the proposed method
library(OPWpaper)
library(dplyr)
library(tidyr)
library(ggplot2)
library(grid)
library(gridExtra)      # for multiplots in the same page
library(xtable)
library(reshape2)       # library for the melt function
library(cowplot)        # plot_grid function
library(mvnfast)		# fast generate multi variate normal
#source("https://bioconductor.org/biocLite.R")
#biocLite("qvalue")
library(qvalue)         # qvalue
#biocLite("DESeq2")
#biocLite("IHW")
library(IHW)
library("htmltools")
library("devtools")
# install IHW
#install_github("vladchimescu/lpsymphony", subdir="lpsymphony")
#install_github("nignatiadis/IHW")
# install FDRreg, version on CRAN is outdated
#install_github(repo= "jgscott/FDRreg", subdir="R_pkg/", ref = "a63cebae6faecb1fb0ebee634195296f39faa11b")
# Bioconductor prerequisites
#source("http://bioconductor.org/biocLite.R")
#biocLite(c("genefilter","DESeq2","qvalue","Biobase",
#           "BiocParallel","airway","pasilla", "BiocStyle"))
# finally install this package
#install_github("nignatiadis/IHWpaper")
#biocLite("IHWpaper")
library(IHWpaper)
#biocLite("genefilter")
library("genefilter")
library(tibble)       # data table
library(MASS)           # boc-cox transforamtion
#devtools::install_github("hadley/lineprof")
library(lineprof)       # check code performance
library(Rcpp)           # C++ library
library(wesanderson)  # for plot colors
#colors <- wes_palette("Cavalcanti")[1:4]
#biocLite("DESeq2")
library("DESeq2")
library(car)		# qqplot
library(abind)
library(pweight)
J <- 100
mu <- rnorm(J)
sigma <- 1 * rep(1, J)
q <- 0.05 / J
res <- bayes_weights(mu, sigma, q)
sigma
mu
res
plot(res$w)
N_current = m
N_prior = m
mu = sqrt(N_current/N_prior)*filters
m <- 10000
null = .8
set.seed(123)
filters <- runif(m, min = 0, max = 3)          # covariate
H <- rbinom(m, size = 1, prob = 1 - null)      # alternative hypothesis true or false
tests <- rnorm(m, mean = H*filters)            # Z-score
pvals <- pnorm(tests, lower.tail = FALSE)
Data <- tibble(pvals, filters)
sigma <- 1 * rep(1, m)
q <- 0.05 / m
res <- bayes_weights(mu, sigma, q)
plot(res$w)
mu = sqrt(N_current/N_prior)*(filters-mean(filters)/sd(filters))
sigma <- 1 * rep(1, m)
N_current = m
N_prior = m
mu = sqrt(N_current/N_prior)*(filters-mean(filters)/sd(filters))
sigma <- 1 * rep(1, m)
q <- 0.05 / m
res <- bayes_weights(mu, sigma, q)
plot(res$w)
OD <- Data[order(filters, decreasing = TRUE), ]
OD_pavlue <- OD$pvals
N_current = m
N_prior = m
mu = sqrt(N_current/N_prior)*(OD$filters-mean(OD$filters)/sd(OD$filters))
sigma <- 1 * rep(1, m)
q <- 0.05 / m
res <- bayes_weights(mu, sigma, q)
plot(res$w)
OD$filters
plot(-res$w)
?opw
pro_w <- opw(pvalue=pvals, filter=filters)$weight
pro_w
dob_w <- bayes_weights(mu, sigma, q)$w
matplot(1:m, cbind(pro_w, dob_w), type="l")
x=1:10
rev(x)
matplot(1:m, cbind(pro_w, rev(dob_w), type="l", lwd=2)
#===============================================================================
# function of simu_fwer--------------
# inpout:----------------
# s = number of replication in a simulation
# m = total number of hypothesis test
# alphaVec = a vector of significance levels
#
# internal parameters:-----
# pval = pvalues from null tests
# pval_filter = filter pvalues from null tests
# test = test statistics
# filter = filter test statistics
# dat = a data frame
# OD = ordered data by filter statistics
# odered.pvalue = ordered pvalue by filter statistics
# nullprop = prportion of null
# m0 = true null test size
# m1 = true alternative test size
# test_effect =  estimated true alternative test effects
# prob_bin = binary ranks probablity
# prob_cont = continuous ranks probability
# w_bin = binary weight
# w_cont = continuous weight
#
# output:---------------
# a matrix of fwer for different methods
#
#===============================================================================-
simu_fwer <- function(s, m, alphaVec)
{
fwer_per_rep <- function(alpha)
{
pval <- runif(m)
pval_filter <- runif(m)
test = qnorm(pval, lower.tail = FALSE)
filter = qnorm(pval_filter, lower.tail = FALSE)
dat = tibble(test, pval, filter)
OD = dat[order(dat$filter, decreasing=TRUE), ]
odered.pvalue = OD$pval
nullprop = qvalue(pval)$pi0
m0 = ceiling(m*nullprop)
m1 = m - m0
model = lm(filter ~ test)
test_effect <- if(m1 == 0) {0
} else {sort(test, decreasing = TRUE)[1:m1]}
et_bin = median(test_effect, na.rm = TRUE)
et_cont = mean(test_effect, na.rm = TRUE)
ey_bin = model$coef[[1]] + model$coef[[2]]*et_bin
ey_cont = model$coef[[1]] + model$coef[[2]]*et_cont
prob_bin <-sapply(1:m, prob_rank_givenEffect, et = ey_bin,
ey = ey_bin,m0 = m0, m1 = m1)
prob_cont <-sapply(1:m, prob_rank_givenEffect, et = ey_cont,
ey = ey_cont, m0 = m0, m1 = m1)
w_bin <- weight_binary(alpha = alpha, et = et_bin, m = m, m1 = m1,
tail = 1, delInterval = .0001, ranksProb = prob_bin)
w_cont = weight_continuous(alpha = alpha, et = et_cont, m = m,
tail = 1, delInterval = .0001 , ranksProb = prob_cont)
ihw_fwer <- ihw(dat$pval, dat$filter, alpha = alpha,
adjustment_type = "bonferroni")
bon = sum(pval <= alpha/m, na.rm = TRUE)
pro_bin = sum(odered.pvalue <= alpha*w_bin/m, na.rm = TRUE)
pro_cont = sum(odered.pvalue <= alpha*w_cont/m, na.rm = TRUE)
IHW <- rejections(ihw_fwer)
return(c(bon, pro_bin, pro_cont, IHW))
}
fwer_per_rep_mat = sapply(alphaVec, fwer_per_rep)
return(fwer_per_rep_mat)
}
alphaVec = seq(.01, .1, .02)
simVal = 1:3  # in actual case use at least simVal = 1000
fwer_mat = sapply(simVal, simu_fwer, m = 10000, alphaVec = alphaVec)
?bayes_weights
?pweight
?smooth.spline
install.packages("pweight")
library(pweight)
bayes_weights()
?bayes_weights
?rowMeans
library(empOPW)
library(empOPW)
effectVec <- c(1, 1.5, 2)
simuVal = 3
FwerPowerFdrPower <- sapply(1:length(effectVec), fwerPowerFdrPower_emp,
simu = simuVal, m = 10000, null = .5, corr = 0,
cv = 0, alpha = .05, groupSize = 100, max.group = 10,
filterEffectVec = effectVec, effectType = "continuous")
FwerPowerFdrPower
