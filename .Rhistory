labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[5]], g[[15]], g[[25]], g[[50]], g[[75]], g[[100]],
labels = letters[1:8], ncol = 4)
# ranks proabilities of the different effect sizes---------
g_prob <- list()
for(i in c(1, 2, 3, 5, 10, 20, 40))
{
ranksProb = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters, group = 100,
h_breaks = 41, bin_idx = i, effectType = "continuous")
ranksProb_dat <- data.frame(ranks = 1:100, ranksProb)
g_prob[[i]] <- ggplot(ranksProb_dat, aes_string(x = "ranks", y = "ranksProb")) +
geom_line(size = 1.5, col="firebrick4") +
labs(x = "Test rank" , y = "p(rank | effect)")
}
ranksProb_bin = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters,
group = 100, effectType = "binary")
ranksProb_bin_dat <- data.frame(ranks = 1:100, ranksProb_bin)
g_prob_bin <- ggplot(ranksProb_bin_dat, aes_string(x = "ranks", y = "ranksProb_bin")) +
geom_line(size = 1.5, col="firebrick4") +
labs(x = "Test rank" , y = "p(rank | effect)")
p_prob <- plot_grid(g_prob[[1]], g_prob[[2]], g_prob[[3]], g_prob[[5]],
g_prob[[10]], g_prob[[20]], g_prob[[40]], g_prob_bin,
labels = letters[1:8], ncol = 4)
p
# ranks proabilities of the different effect sizes---------
g_prob <- list()
for(i in c(1, 2, 3, 5, 10, 20, 40))
{
ranksProb = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters, group = 100,
h_breaks = 41, bin_idx = i, effectType = "continuous")
ranksProb_dat <- data.frame(ranks = 1:100, ranksProb)
g_prob[[i]] <- ggplot(ranksProb_dat, aes_string(x = "ranks", y = "ranksProb")) +
geom_line(size = 1.5, col="firebrick4") +
labs(x = "Test rank" , y = "p(rank | effect)")
}
source("https://bioconductor.org/biocLite.R")
biocLite("OPWeight")
library(devtools)
install_github("mshasan/empOPW")
library(empOPW)
# ranks proabilities of the different effect sizes---------
g_prob <- list()
for(i in c(1, 2, 3, 5, 10, 20, 40))
{
ranksProb = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters, group = 100,
h_breaks = 41, bin_idx = i, effectType = "continuous")
ranksProb_dat <- data.frame(ranks = 1:100, ranksProb)
g_prob[[i]] <- ggplot(ranksProb_dat, aes_string(x = "ranks", y = "ranksProb")) +
geom_line(size = 1.5, col="firebrick4") +
labs(x = "Test rank" , y = "p(rank | effect)")
}
ranksProb_bin = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters,
group = 100, effectType = "binary")
ranksProb_bin_dat <- data.frame(ranks = 1:100, ranksProb_bin)
g_prob_bin <- ggplot(ranksProb_bin_dat, aes_string(x = "ranks", y = "ranksProb_bin")) +
geom_line(size = 1.5, col="firebrick4") +
labs(x = "Test rank" , y = "p(rank | effect)")
p_prob <- plot_grid(g_prob[[1]], g_prob[[2]], g_prob[[3]], g_prob[[5]],
g_prob[[10]], g_prob[[20]], g_prob[[40]], g_prob_bin,
labels = letters[1:8], ncol = 4)
p_prob
# dist of five groups p-values-----------
grpSize = 1000
g <- list()
for(j in c(1, 5, 15, 25, 50, 75, 100))
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- data.frame(pvalPerGrp)
colors <- rep("#4281AE", 40)
colors[c(1, 2, 3, 5, 10, 20, 40)] <- c("red2","orangered2", "orange4", "gold4",
"khaki3", "sienna3", "yello4")
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = "pvalPerGrp")) +
geom_histogram(colour = "#1F3553", fill = colors, binwidth = 0.025,
boundary = 0) +
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[5]], g[[15]], g[[25]], g[[50]], g[[75]], g[[100]],
labels = letters[1:8], ncol = 4)
# dist of five groups p-values-----------
grpSize = 1000
g <- list()
for(j in c(1, 5, 15, 25, 50, 75, 100))
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- data.frame(pvalPerGrp)
colors <- rep("#4281AE", 40)
colors[c(1, 2, 3, 5, 10, 20, 40)] <- c("red2","orangered2", "orange4", "gold4",
"khaki3", "sienna3", "yellow4")
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = "pvalPerGrp")) +
geom_histogram(colour = "#1F3553", fill = colors, binwidth = 0.025,
boundary = 0) +
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[5]], g[[15]], g[[25]], g[[50]], g[[75]], g[[100]],
labels = letters[1:8], ncol = 4)
p
hist_pval <- ggplot(Data, aes_string(x = "pvals")) +
geom_histogram(colour = "#1F9553", fill = "#4281AE", binwidth = 0.05,
boundary = 0) +
labs(x = "P-values")
# ordered by covariate---------
OD <- Data[order(filters, decreasing = TRUE), ]
OD_pavlue <- OD$pvals
grpSize = 1000
g <- list()
for(j in c(1, 5, 15, 25, 50, 75, 100))
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- data.frame(pvalPerGrp)
colors <- rep("#4281AE", 20)
colors[c(1, 2, 3, 5, 10, 15, 20)] <- c("red2","orangered2", "orange4", "gold4",
"khaki3", "sienna3", "yellow4")
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = "pvalPerGrp")) +
geom_histogram(colour = "#1F3553", fill = colors, binwidth = 0.025,
boundary = 0) +
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[5]], g[[15]], g[[25]], g[[50]], g[[75]], g[[100]],
labels = letters[1:8], ncol = 4)
# dist of five groups p-values-----------
grpSize = 1000
g <- list()
for(j in c(1, 5, 15, 25, 50, 75, 100))
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- data.frame(pvalPerGrp)
colors <- rep("#4281AE", 20)
colors[c(1, 2, 3, 5, 10, 15, 20)] <- c("red2","orangered2", "orange4", "gold4",
"khaki3", "sienna3", "yellow4")
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = "pvalPerGrp")) +
geom_histogram(colour = "#1F3553", fill = colors, binwidth = 0.025,
boundary = 0) +
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[5]], g[[15]], g[[25]], g[[50]], g[[75]], g[[100]],
labels = letters[1:8], ncol = 4)
pvalPerGrp
# dist of five groups p-values-----------
grpSize = 1000
g <- list()
for(j in c(1, 5, 15, 25, 50, 75, 100))
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- data.frame(pvalPerGrp)
colors <- rep("#4281AE", 20)
colors[c(1, 2, 3, 5, 10, 15, 20)] <- c("red2","orangered2", "orange4", "gold4",
"khaki3", "sienna3", "yellow4")
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = "pvalPerGrp")) +
geom_histogram(colour = "#1F3553", fill = colors, binwidth = 0.05,
boundary = 0) +
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[5]], g[[15]], g[[25]], g[[50]], g[[75]], g[[100]],
labels = letters[1:8], ncol = 4)
p
getwd()
setwd("U:/Documents/My Research (UGA)/Multiple Hypoetheses/Article-2")
#rm(list=ls())
library(OPWeight)
library(OPWpaper)
library(empOPW)
library(MASS)
library(qvalue)
library(limma)
library(splines)
library(DESeq2)
#install.packages("mvnfast")
library(mvnfast)		# fast generate multi variate normal
#source("https://bioconductor.org/biocLite.R")
#biocLite("IHW")
library("IHW")		# independent hypothesis weight
library(ggplot2)
library(reshape2)
library(cowplot)
library(tibble)
# continuous case
# data generating
#===============================================================================
m <- 10000
null = .8
set.seed(123)
filters <- runif(m, min = 0, max = 3)          # covariate
H <- rbinom(m, size = 1, prob = 1 - null)      # alternative hypothesis true or false
tests <- rnorm(m, mean = H*filters)            # Z-score
pvals <- pnorm(tests, lower.tail = FALSE)
Data <- tibble(pvals, filters)
# dist. of all p-values-------
hist_pval <- ggplot(Data, aes_string(x = "pvals")) +
geom_histogram(colour = "#1F3553", fill = "#4281AE", binwidth = 0.05,
boundary = 0) +
labs(x = "P-values")
# ordered by covariate---------
OD <- Data[order(filters, decreasing = TRUE), ]
OD_pavlue <- OD$pvals
# dist of five groups p-values-----------
grpSize = 1000
colors <- rep("#4281AE", 20)
bin_ranksProb <- c(1, 2, 5, 10)
colors[bin_ranksProb] <- c("red3","green3", "blue3", "gold3")
pval = bin_ranksProb*.05
qnorm(1 - pval/2)
g <- list()
for(j in c(1, 2, 3, 4, 5, 7, 10))
{
pvalPerGrp <- OD_pavlue[(j*grpSize - grpSize + 1):(j*grpSize)]
pvalPerGrp_dat <- data.frame(pvalPerGrp)
g[[j]] <- ggplot(pvalPerGrp_dat, aes_string(x = "pvalPerGrp")) +
geom_histogram(colour = "#1F3553", fill = colors, binwidth = 0.05,
boundary = 0) +
scale_y_continuous(limits = c(0, 225))+
labs(x = "P-values")
}
p <- plot_grid(hist_pval, g[[1]], g[[2]], g[[3]], g[[4]], g[[5]], g[[7]], g[[10]],
labels = letters[1:8], ncol = 4)
# ranks proabilities of the different effect sizes---------
grps = 10
g_prob1 <- list()
g_prob <- list()
for(i in bin_ranksProb)
{
# ranks prob. without smoothing
ranksProb1 = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters, group = grps,
smooth = FALSE, h_breaks = 21, bin_idx = i, effectType = "continuous")
ranksProb_dat1 <- data.frame(ranks = 1:grps, ranksProb1)
g_prob1[[i]] <- ggplot(ranksProb_dat1, aes_string(x = "ranks", y = "ranksProb1")) +
geom_line(size = 1.5, col = colors[i]) +
labs(x = "Ranks" , y = "p(rank | effect)")
# ranks prob. after smoothing
ranksProb = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters, group = grps,
h_breaks = 21, bin_idx = i, effectType = "continuous")
ranksProb_dat <- data.frame(ranks = 1:grps, ranksProb)
g_prob[[i]] <- ggplot(ranksProb_dat, aes_string(x = "ranks", y = "ranksProb")) +
geom_line(size = 1.5, col=colors[i]) +
labs(x = "Ranks" , y = "p(rank | effect)")
}
p_prob <- plot_grid(g_prob1[[1]], g_prob1[[2]], g_prob1[[5]], g_prob1[[10]],
g_prob[[1]], g_prob[[2]], g_prob[[5]], g_prob[[10]],
labels = letters[1:4], ncol = 4)
# ranks probability and weights-----------
# ranks prob without optimal groups----
# ranksProb = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters, group = 100,
#                         h_breaks = 21, bin_idx = 1, effectType = "continuous")
# # ranks prob with optimal group--------
# # need to work for optimal group---------
grps = 10
null = .5
m <- 10000
set.seed(123)
filters <- runif(m, min = 0, max = 3)          # covariate
H <- rbinom(m, size = 1, prob = 1 - null)      # alternative hypothesis true or false
tests <- rnorm(m, mean = H*filters)            # Z-score
pvals <- pnorm(tests, lower.tail = FALSE)
emp_results.5 <- empOPW(pvalue = pvals, filter = filters, group = grps, max.group = NULL,
h_breaks = 21, effectType = "continuous", method = "BH")
grps = 10
null = .5
m <- 10000
set.seed(123)
filters <- runif(m, min = 0, max = 3)          # covariate
H <- rbinom(m, size = 1, prob = 1 - null)      # alternative hypothesis true or false
tests <- rnorm(m, mean = H*filters)            # Z-score
pvals <- pnorm(tests, lower.tail = FALSE)
emp_results.5 <- empOPW(pvalue = pvals, filter = filters, group = grps, max.group = NULL,
h_breaks = 21, effectType = "continuous", method = "BH")
null = .8
H <- rbinom(m, size = 1, prob = 1 - null)      # alternative hypothesis true or false
tests <- rnorm(m, mean = H*filters)            # Z-score
pvals <- pnorm(tests, lower.tail = FALSE)
emp_results.8 <- empOPW(pvalue = pvals, filter = filters, group = grps, max.group = NULL,
h_breaks = 21, effectType = "continuous", method = "BH")
null = .95
H <- rbinom(m, size = 1, prob = 1 - null)      # alternative hypothesis true or false
tests <- rnorm(m, mean = H*filters)            # Z-score
pvals <- pnorm(tests, lower.tail = FALSE)
emp_results.95 <- empOPW(pvalue = pvals, filter = filters, group = grps, max.group = NULL,
h_breaks = 21, effectType = "continuous", method = "BH")
ranksProb_group <- data.frame(ranks = 1:grps, prob.5 = emp_results$ranksProb,
prob.8 = emp_results.8$ranksProb, prob.95 = emp_results.95$ranksProb)
ranksProb_group <- data.frame(ranks = 1:grps, prob.5 = emp_results.5$ranksProb,
prob.8 = emp_results.8$ranksProb, prob.95 = emp_results.95$ranksProb)
ranksProb_group
ranksProb_null <- data.frame(ranks = 1:grps, prob.5 = emp_results.5$ranksProb,
prob.8 = emp_results.8$ranksProb, prob.95 = emp_results.95$ranksProb)
null = .2
H <- rbinom(m, size = 1, prob = 1 - null)      # alternative hypothesis true or false
tests <- rnorm(m, mean = H*filters)            # Z-score
pvals <- pnorm(tests, lower.tail = FALSE)
emp_results.2 <- empOPW(pvalue = pvals, filter = filters, group = grps, max.group = NULL,
h_breaks = 21, effectType = "continuous", method = "BH")
ranksProb_null <- data.frame(ranks = 1:grps, emp_results.2$ranksProb,
emp_results.5$ranksProb, emp_results.8$ranksProb,
emp_results.95$ranksProb)
names(ranksProb_null) <- c("ranks", "20%", "50%", "80%", "95%")
ranksProb_null
prob_by_null_melt <- melt(ranksProb_null, id.var = "ranks",
variable.name = "null prop.")
prob_by_null_melt
ranksProb_null_melt <- melt(ranksProb_null, id.var = "ranks", variable.name = "null prop.")
ranksProb_null <- data.frame(ranks = 1:grps, emp_results.2$ranksProb,
emp_results.5$ranksProb, emp_results.8$ranksProb,
emp_results.95$ranksProb)
names(ranksProb_null) <- c("ranks", "20%", "50%", "80%", "95%")
ranksProb_null_melt <- melt(ranksProb_null, id.var = "ranks",
variable.name = "null prop.")
g_prob <- ggplot(ranksProb_null_melt, aes_string(x = "ranks", y = "value",
group = "null prop.", colour = "null prop.")) +
geom_line(aes(linetype = "null prop."), size = 1.5) +
labs(x = "Ranks", y = "p(rank | effect)", title = "group = 10")+
theme(legend.position="none")
ggplot(ranksProb_null_melt, aes_string(x = "ranks", y = "value",
group = "null prop.", colour = "null prop."))
ggplot(ranksProb_null_melt, aes_string(x = "ranks", y = "value",
group = "'null prop.'", colour = "'null prop.'"))
+
geom_line(aes(linetype = "'null prop.'"), size = 1.5)
ggplot(ranksProb_null_melt, aes_string(x = "ranks", y = "value",
group = "'null prop.'", colour = "'null prop.'")) +
geom_line(aes(linetype = "'null prop.'"), size = 1.5) +
labs(x = "Ranks", y = "p(rank | effect)", title = "group = 10")
ranksProb_null <- data.frame(ranks = 1:grps, emp_results.2$ranksProb,
emp_results.5$ranksProb, emp_results.8$ranksProb,
emp_results.95$ranksProb)
names(ranksProb_null) <- c("ranks", "20%", "50%", "80%", "95%")
ranksProb_null_melt <- melt(ranksProb_null, id.var = "ranks",
variable.name = "null prop.")
g_prob <- ggplot(ranksProb_null_melt, aes_string(x = "ranks", y = "value",
group = "'null prop.'", colour = "'null prop.'")) +
geom_line(aes(linetype = "'null prop.'"), size = 1.5) +
labs(x = "Ranks", y = "p(rank | effect)", title = "group = 10")
g_prob
g_prob <- ggplot(ranksProb_null_melt, aes_string(x = "ranks", y = "value",
group = "nullprop", colour = "nullprop")) +
geom_line(aes(linetype = "nullprop'"), size = 1.5) +
labs(x = "Ranks", y = "p(rank | effect)", title = "group = 10")
g_prob
ranksProb_null_melt <- melt(ranksProb_null, id.var = "ranks",
variable.name = "nullprop")
g_prob <- ggplot(ranksProb_null_melt, aes_string(x = "ranks", y = "value",
group = "nullprop", colour = "nullprop")) +
geom_line(aes(linetype = "nullprop'"), size = 1.5) +
labs(x = "Ranks", y = "p(rank | effect)", title = "group = 10")
g_prob
g_prob <- ggplot(ranksProb_null_melt, aes_string(x = "ranks", y = "value",
group = "nullprop", colour = "nullprop")) +
geom_line(aes(linetype = "nullprop'"), size = 1.5) +
labs(x = "Ranks", y = "p(rank | effect)", title = "group = 10") +
theme(legend.position="none")
g_prob
wgt_null <- data.frame(ranks = 1:grps, emp_results.2$group_wgt,
emp_results.5$group_wgt, emp_results.8$group_wgt,
emp_results.95$group_wgt)
names(wgt_null) <- c("ranks", "20%", "50%", "80%", "95%")
wgt_null_melt <- melt(wgt_null, id.var = "ranks",
variable.name = "nullprop")
g_wgt <- ggplot(wgt_null_melt, aes_string(x = "ranks", y = "value",
group = "nullprop", colour = "nullprop")) +
geom_line(aes(linetype = "nullprop'"), size = 1.5) +
labs(x = "Ranks", y = "Weight", title = "group = 10") +
theme(legend.position="none")
g_wgt
weight_null <- data.frame(ranks = 1:grps, emp_results.2$weight,
emp_results.5$weight, emp_results.8$weight,
emp_results.95$weight)
names(weight_null) <- c("ranks", "20%", "50%", "80%", "95%")
weight_null_melt <- melt(weight_null, id.var = "ranks",
variable.name = "nullprop")
g_weight <- ggplot(weight_null_melt, aes_string(x = "ranks", y = "value",
group = "nullprop", colour = "nullprop")) +
geom_line(aes_string(linetype = "nullprop'"), size = 1.5) +
labs(x = "Tests", y = "Weight", title = "m = 10000") +
theme(legend.position="none")
weight_null <- data.frame(ranks = 1:grps, emp_results.2$weight,
emp_results.5$weight, emp_results.8$weight,
emp_results.95$weight)
names(weight_null) <- c("ranks", "20%", "50%", "80%", "95%")
weight_null_melt <- melt(weight_null, id.var = "ranks",
variable.name = "nullprop")
g_weight <- ggplot(weight_null_melt, aes_string(x = "ranks", y = "value",
group = "nullprop", colour = "nullprop")) +
geom_line(aes_string(linetype = "nullprop"), size = 1.5) +
labs(x = "Tests", y = "Weight", title = "m = 10000") +
theme(legend.position="none")
g_weight
weight_null <- data.frame(tests = 1:m, emp_results.2$weight,
emp_results.5$weight, emp_results.8$weight,
emp_results.95$weight)
names(weight_null) <- c("tests", "20%", "50%", "80%", "95%")
weight_null_melt <- melt(weight_null, id.var = "tests",
variable.name = "nullprop")
g_weight <- ggplot(weight_null_melt, aes_string(x = "tests", y = "value",
group = "nullprop", colour = "nullprop")) +
geom_line(aes_string(linetype = "nullprop"), size = 1.5) +
labs(x = "Tests", y = "Weight", title = "m = 10000") +
theme(legend.position="none")
g_weight
p_prob_wgt <- plot_grid(g_prob, g_wgt, g_weight, labels = letters[1:3], ncol=3)
p_prob_wgt
null = .8
grps = 5
H <- rbinom(m, size = 1, prob = 1 - null)      # alternative hypothesis true or false
tests <- rnorm(m, mean = H*filters)            # Z-score
pvals <- pnorm(tests, lower.tail = FALSE)
emp_results.2 <- empOPW(pvalue = pvals, filter = filters, group = grps, max.group = NULL,
h_breaks = 21, effectType = "continuous", method = "BH")
emp_results5 <- empOPW(pvalue = pvals, filter = filters, group = grps, max.group = NULL,
h_breaks = 21, effectType = "continuous", method = "BH")
grps = 5
H <- rbinom(m, size = 1, prob = 1 - null)      # alternative hypothesis true or false
tests <- rnorm(m, mean = H*filters)            # Z-score
pvals <- pnorm(tests, lower.tail = FALSE)
emp_results5 <- empOPW(pvalue = pvals, filter = filters, group = grps, max.group = NULL,
h_breaks = 21, effectType = "continuous", method = "BH")
grps = 10
H <- rbinom(m, size = 1, prob = 1 - null)      # alternative hypothesis true or false
tests <- rnorm(m, mean = H*filters)            # Z-score
pvals <- pnorm(tests, lower.tail = FALSE)
emp_results10 <- empOPW(pvalue = pvals, filter = filters, group = grps, max.group = NULL,
h_breaks = 21, effectType = "continuous", method = "BH")
grps = 15
H <- rbinom(m, size = 1, prob = 1 - null)      # alternative hypothesis true or false
tests <- rnorm(m, mean = H*filters)            # Z-score
pvals <- pnorm(tests, lower.tail = FALSE)
emp_results15 <- empOPW(pvalue = pvals, filter = filters, group = grps, max.group = NULL,
h_breaks = 21, effectType = "continuous", method = "BH")
grps = 20
H <- rbinom(m, size = 1, prob = 1 - null)      # alternative hypothesis true or false
tests <- rnorm(m, mean = H*filters)            # Z-score
pvals <- pnorm(tests, lower.tail = FALSE)
emp_results20 <- empOPW(pvalue = pvals, filter = filters, group = grps, max.group = NULL,
h_breaks = 21, effectType = "continuous", method = "BH")
weight_grps <- data.frame(tests = 1:m, emp_results5$weight,
emp_results10$weight, emp_results15$weight,
emp_results20$weight)
weight_grps
names(weight_grps) <- c("tests", "5", "10", "15", "20")
weight_grps
weight_grps
names(weight_grps) <- c("tests", "grp5", "grp10", "grp15", "grp20")
weight_grps <- data.frame(tests = 1:m, emp_results5$weight,
emp_results10$weight, emp_results15$weight,
emp_results20$weight)
names(weight_grps) <- c("tests", "grp5", "grp10", "grp15", "grp20")
weight_grps
weight_grps_melt <- melt(weight_grps, id.var = "tests",
variable.name = "grps")
weight_grps_melt
g_weight <- ggplot(weight_grps_melt, aes_string(x = "tests", y = "value",
group = "grps", colour = "grps")) +
geom_line(aes_string(linetype = "grps"), size = 1.5) +
labs(x = "Tests", y = "Weight", title = "m = 10000") +
theme(legend.position="none")
g_weight_grps <- ggplot(weight_grps_melt, aes_string(x = "tests", y = "value",
group = "grps", colour = "grps")) +
geom_line(aes_string(linetype = "grps"), size = 1.5) +
labs(x = "Tests", y = "Weight", title = "m = 10000") +
theme(legend.position="none")
p_prob_wgt <- plot_grid(g_prob, g_wgt, g_weight, g_weight_grps,
labels = letters[1:4], ncol=4)
p_prob_wgt
g_weight_grps <- ggplot(weight_grps_melt, aes_string(x = "tests", y = "value",
group = "grps", colour = "grps")) +
geom_line(aes_string(linetype = "grps"), size = 1.5) +
labs(x = "Tests", y = "Weight", title = "m = 10000")
g_weight_grps
g_weight
g_weight <- ggplot(weight_null_melt, aes_string(x = "tests", y = "value",
group = "nullprop", colour = "nullprop")) +
geom_line(aes_string(linetype = "nullprop"), size = 1.5) +
labs(x = "Tests", y = "Weight", title = "m = 10000") +
theme(legend.position="none")
g_weight
p_prob_wgt <- plot_grid(g_prob, g_wgt, g_weight, g_weight_grps,
labels = letters[1:4], ncol=4)
p_prob_wgt
weight_grps <- data.frame(tests = 1:m, emp_results5$weight,
emp_results10$weight, emp_results15$weight,
emp_results20$weight)
names(weight_grps) <- c("tests", "grp5", "grp10", "grp15", "grp20")
weight_grps_melt <- melt(weight_grps, id.var = "tests",
variable.name = "grps")
g_weight_grps <- ggplot(weight_grps_melt, aes_string(x = "tests", y = "value",
group = "grps", colour = "grps")) +
geom_line(aes_string(linetype = "grps"), size = 1.5) +
labs(x = "Tests", y = "Weight", title = "m = 10000") +
theme(legend.position="none")
p_prob_wgt <- plot_grid(g_prob, g_wgt, g_weight, g_weight_grps,
labels = letters[1:4], ncol=4)
p_prob_wgt
g_wgt <- ggplot(wgt_null_melt, aes_string(x = "ranks", y = "value",
group = "nullprop", colour = "nullprop")) +
geom_line(aes_string(linetype = "nullprop'"), size = 1.5) +
labs(x = "Ranks", y = "Weight", title = "group = 10") +
theme(legend.direction = "horizontal", legend.position = "bottom")
g_wgt <- ggplot(wgt_null_melt, aes_string(x = "ranks", y = "value",
group = "nullprop", colour = "nullprop")) +
geom_line(aes_string(linetype = "nullprop'"), size = 1.5) +
labs(x = "Ranks", y = "Weight", title = "group = 10") +
theme(legend.direction = "horizontal", legend.position = "bottom")
g_wgt <- ggplot(wgt_null_melt, aes_string(x = "ranks", y = "value",
group = "nullprop", colour = "nullprop")) +
geom_line(aes_string(linetype = "nullprop"), size = 1.5) +
labs(x = "Ranks", y = "Weight", title = "group = 10") +
theme(legend.direction = "horizontal", legend.position = "bottom")
g_weight_grps <- ggplot(weight_grps_melt, aes_string(x = "tests", y = "value",
group = "grps", colour = "grps")) +
geom_line(aes_string(linetype = "grps"), size = 1.5) +
labs(x = "Tests", y = "Weight", title = "m = 10000") +
theme(legend.direction = "horizontal", legend.position = "bottom")
p_prob_wgt <- plot_grid(g_prob, g_wgt, g_weight, g_weight_grps,
labels = letters[1:4], ncol=4)
p_prob_wgt
