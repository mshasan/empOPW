n_rejections = dim(rejections_list)[1]
return(list(totalTests = m, nullProp = nullProp,
ranksProb = ranksProb, weight = wgt,
rejections = n_rejections, rejections_list = rejections_list))
}
results <- empOPW(pvalue = pvals, filter = filters, effectType = "continuous",
method = "BH")
library(qvalue)
library(tibble)
library(limma)
source("https://bioconductor.org/biocLite.R")
biocLite("limma")
library(limma)
results <- empOPW(pvalue = pvals, filter = filters, effectType = "continuous",
method = "BH")
prob_rank_givenEffect_emp <- function(pvalue, filter, group = 5L, h_breaks = 101,
effectType = c("continuous", "binary"))
{
grpSize <- ceiling(length(pvalue)/group)
Data <- tibble(pvalue, filter)
OD <- Data[order(Data$filter, decreasing = TRUE), ]
OD_pvalue <- OD$pvalue
# function to compute ranks probbaility per group--------------
fun_prob <- function(group)
{
pval_perGrp <- OD_pvalue[(group*grpSize - grpSize + 1):(group*grpSize)]
if(effectType == "continuous"){
hist_dens <- hist(pval_perGrp, freq = FALSE,
breaks = seq(0, 1, length = h_breaks))$density
probAll = hist_dens/sum(hist_dens)
prob = probAll[1]
} else {
prob <- 1 - propTrueNull(p = pval_perGrp, method = "lfdr")
}
return(prob)
}
probVec <- sapply(1:group, fun_prob)
# smooting and nomalizing the ranks prob-------------
probVec_smooth <- smooth.spline(x = 1:group, y = probVec, df = 3)$y
probVec_smooth_norm <- probVec_smooth/sum(probVec_smooth, na.rm = TRUE)
return(probVec_smooth_norm)
}
results <- empOPW(pvalue = pvals, filter = filters, effectType = "continuous",
method = "BH")
library(OPWeight)
results <- empOPW(pvalue = pvals, filter = filters, effectType = "continuous",
method = "BH")
results
weight_continuous
weight_binary
m = 10000
set.seed(3)
filters = runif(m, min = 0, max = 2.5)          # filter statistics
H = rbinom(m, size = 1, prob = 0.1)             # hypothesis true or false
tests = rnorm(m, mean = H * filters)            # Z-score
pvals = 1 - pnorm(tests)                        # pvalue
pvalue = pvals
filter = filters
effectType = "continuous"
method = "BH"
weight = NULL
ranksProb = NULL
mean_testEffect = NULL
alpha = .05
tail = 1L
delInterval = .0001
group = 5L
h_breaks = 101L
m = length(pvalue)
nullProp = qvalue(p = pvalue, pi0.method = "bootstrap")$pi0
m0 = ceiling(nullProp*m)
m1 = m - m0
Data = tibble(pvalue, filter)
OD <- Data[order(Data$filter, decreasing = TRUE), ]
OD_pvalue <- OD$pvalue
test <- qnorm(pvalue/tail, lower.tail = FALSE)
test[which(!is.finite(test))] <- NA
m1
m0
if(m1 == 0){
test_effect_vec <- 0
} else {
test_effect_vec <-  sort(test, decreasing = TRUE)[1:m1]
}
mean_testEffect
if(!is.null(mean_testEffect)){
mean_testEffect <- mean_testEffect
} else {
if(effectType == "continuous"){
mean_testEffect <- mean(test_effect_vec, na.rm = TRUE)
} else {
mean_testEffect <- median(test_effect_vec, na.rm = TRUE)
}
}
mean_testEffect
if(!is.null(ranksProb)){
ranksProb <- ranksProb
} else {
message("computing ranks probabilities")
# compute the probability of the rank of the filter given the mean effect
ranksProb <- prob_rank_givenEffect_emp(pvalue = pvalue, filter = filter,
group = group, h_breaks = h_breaks, effectType = effectType)
message("finished computing the ranks probabilities")
}
ranksProb
sum(ranksProb)
grpSize <- ceiling(m/group)
grpSize
m1/m
m1/m*grpSize
m1/m*5
weight_binary
message("computing weights")
if(effectType == "continuous"){
wgt = weight_continuous(alpha = alpha, et = mean_testEffect, m = group,
ranksProb = ranksProb)
} else {
wgt = weight_binary(alpha = alpha, et = mean_testEffect, m = group,
m1 = m1/m*group, ranksProb = ranksProb)
}
wgt
sum(wgt)
effectType="binary"
if(effectType == "continuous"){
wgt = weight_continuous(alpha = alpha, et = mean_testEffect, m = group,
ranksProb = ranksProb)
} else {
wgt = weight_binary(alpha = alpha, et = mean_testEffect, m = group,
m1 = m1/m*group, ranksProb = ranksProb)
}
wgt
wgt_all = rep(wgt, each = m/group)
wgt_all
sum(wgt_all)
if(method == "BH"){
padj <- p.adjust(OD_pvalue/wgt_all, method = "BH")
rejections_list = OD[which((padj <= alpha) == TRUE), ]
} else {
rejections_list = OD[which((OD_pvalue <= alpha*wgt_all/m) == TRUE), ]
}
n_rejections = dim(rejections_list)[1]
n_rejections
if(method == "BH"){
padj <- p.adjust(OD_pvalue, method = "BH")
rejections_list = OD[which((padj <= alpha) == TRUE), ]
} else {
rejections_list = OD[which((OD_pvalue <= alpha*wgt_all/m) == TRUE), ]
}
n_rejections = dim(rejections_list)[1]
n_rejections
empOPW <- function(pvalue, filter, weight = NULL, ranksProb = NULL, mean_testEffect = NULL,
alpha = .05, tail = 1L, delInterval = .0001, group = 5L, h_breaks = 101L,
effectType = c("continuous", "binary"), method = c("BH", "BON"), ... )
{
# compute the number of tests------------
m = length(pvalue)
nullProp = qvalue(p = pvalue, pi0.method = "bootstrap")$pi0
m0 = ceiling(nullProp*m)
m1 = m - m0
# formulate a data set-------------
Data = tibble(pvalue, filter)
OD <- Data[order(Data$filter, decreasing = TRUE), ]
OD_pvalue <- OD$pvalue
#check whether weight is provided------------
if(!is.null(weight)){
wgt <- weight
} else {
# compute test statistics from the pvalues---------
test <- qnorm(pvalue/tail, lower.tail = FALSE)
test[which(!is.finite(test))] <- NA
# estimate the true alterantive test effect sizes----------------
if(m1 == 0){
test_effect_vec <- 0
} else {
test_effect_vec <-  sort(test, decreasing = TRUE)[1:m1]
}
# estimate the mean test effect size-------------
if(!is.null(mean_testEffect)){
mean_testEffect <- mean_testEffect
} else {
if(effectType == "continuous"){
mean_testEffect <- mean(test_effect_vec, na.rm = TRUE)
} else {
mean_testEffect <- median(test_effect_vec, na.rm = TRUE)
}
}
#check whether filter ranks probability is provided------------
if(!is.null(ranksProb)){
ranksProb <- ranksProb
} else {
message("computing ranks probabilities")
# compute the probability of the rank of the filter given the mean effect
ranksProb <- prob_rank_givenEffect_emp(pvalue = pvalue, filter = filter,
group = group, h_breaks = h_breaks, effectType = effectType)
message("finished computing the ranks probabilities")
}
# compute the weights (always right-tailed)------------
message("computing weights")
if(effectType == "continuous"){
wgt = weight_continuous(alpha = alpha, et = mean_testEffect, m = group,
ranksProb = ranksProb)
} else {
wgt = weight_binary(alpha = alpha, et = mean_testEffect, m = group,
m1 = m1/m*group, ranksProb = ranksProb)
}
message("finished computing the weights")
}
wgt_all = rep(wgt, each = m/group)
message("comparing pvalues with thresholds")
if(method == "BH"){
padj <- p.adjust(OD_pvalue/wgt_all, method = "BH")
rejections_list = OD[which((padj <= alpha) == TRUE), ]
} else {
rejections_list = OD[which((OD_pvalue <= alpha*wgt_all/m) == TRUE), ]
}
# outputs--------------
n_rejections = dim(rejections_list)[1]
return(list(totalTests = m, nullProp = nullProp,
ranksProb = ranksProb, weight = wgt,
rejections = n_rejections, rejections_list = rejections_list))
}
empOPW <- function(pvalue, filter, weight = NULL, ranksProb = NULL, mean_testEffect = NULL,
alpha = .05, tail = 1L, delInterval = .0001, group = 5L, h_breaks = 101L,
effectType = c("continuous", "binary"), method = c("BH", "BON"), ... )
{
# compute the number of tests------------
m = length(pvalue)
nullProp = qvalue(p = pvalue, pi0.method = "bootstrap")$pi0
m0 = ceiling(nullProp*m)
m1 = m - m0
# formulate a data set-------------
Data = tibble(pvalue, filter)
OD <- Data[order(Data$filter, decreasing = TRUE), ]
OD_pvalue <- OD$pvalue
#check whether weight is provided------------
if(!is.null(weight)){
wgt <- weight
} else {
# compute test statistics from the pvalues---------
test <- qnorm(pvalue/tail, lower.tail = FALSE)
test[which(!is.finite(test))] <- NA
# estimate the true alterantive test effect sizes----------------
if(m1 == 0){
test_effect_vec <- 0
} else {
test_effect_vec <-  sort(test, decreasing = TRUE)[1:m1]
}
# estimate the mean test effect size-------------
if(!is.null(mean_testEffect)){
mean_testEffect <- mean_testEffect
} else {
if(effectType == "continuous"){
mean_testEffect <- mean(test_effect_vec, na.rm = TRUE)
} else {
mean_testEffect <- median(test_effect_vec, na.rm = TRUE)
}
}
#check whether filter ranks probability is provided------------
if(!is.null(ranksProb)){
ranksProb <- ranksProb
} else {
message("computing ranks probabilities")
# compute the probability of the rank of the filter given the mean effect
ranksProb <- prob_rank_givenEffect_emp(pvalue = pvalue, filter = filter,
group = group, h_breaks = h_breaks, effectType = effectType)
message("finished computing the ranks probabilities")
}
# compute the weights (always right-tailed)------------
message("computing weights")
if(effectType == "continuous"){
wgt = weight_continuous(alpha = alpha, et = mean_testEffect, m = group,
ranksProb = ranksProb)
} else {
wgt = weight_binary(alpha = alpha, et = mean_testEffect, m = group,
m1 = m1/m*group, ranksProb = ranksProb)
}
message("finished computing the weights")
}
wgt_all = rep(wgt, each = m/group)
message("comparing pvalues with thresholds")
if(method == "BH"){
padj <- p.adjust(OD_pvalue/wgt_all, method = "BH")
rejections_list = OD[which((padj <= alpha) == TRUE), ]
} else {
rejections_list = OD[which((OD_pvalue <= alpha*wgt_all/m) == TRUE), ]
}
# outputs--------------
n_rejections = dim(rejections_list)[1]
return(list(totalTests = m, nullProp = nullProp,
ranksProb = ranksProb, weight = wgt_all,
rejections = n_rejections, rejections_list = rejections_list))
}
results <- empOPW(pvalue = pvals, filter = filters, effectType = "continuous",
method = "BH")
results
results2 <- empOPW(pvalue = pvals, filter = filters, mean_testEffect = et, tail = 2,
effectType = "continuous", method = "BH")
et = mean(tests)
results2 <- empOPW(pvalue = pvals, filter = filters, mean_testEffect = et, tail = 2,
effectType = "continuous", method = "BH")
results2
results2 <- empOPW(pvalue = pvals, filter = filters, mean_testEffect = et, tail = 1,
effectType = "continuous", method = "BH")
results2
m = 10000
set.seed(3)
filters = runif(m, min = 0, max = 2.5)          # filter statistics
H = rbinom(m, size = 1, prob = 0.1)             # hypothesis true or false
tests = rnorm(m, mean = H * filters)            # Z-score
pvals = 1 - pnorm(tests)                        # pvalue
empOPW <- function(pvalue, filter, weight = NULL, ranksProb = NULL, mean_testEffect = NULL,
alpha = .05, tail = 1L, delInterval = .0001, group = 5L, h_breaks = 101L,
effectType = c("continuous", "binary"), method = c("BH", "BON"), ... )
{
# compute the number of tests------------
m = length(pvalue)
nullProp = qvalue(p = pvalue, pi0.method = "bootstrap")$pi0
m0 = ceiling(nullProp*m)
m1 = m - m0
# formulate a data set-------------
Data = tibble(pvalue, filter)
OD <- Data[order(Data$filter, decreasing = TRUE), ]
OD_pvalue <- OD$pvalue
#check whether weight is provided------------
if(!is.null(weight)){
wgt <- weight
} else {
# estimate the mean test effect size-------------
if(!is.null(mean_testEffect)){
mean_testEffect <- mean_testEffect
} else {
# compute test statistics from the pvalues---------
test <- qnorm(pvalue/tail, lower.tail = FALSE)
test[which(!is.finite(test))] <- NA
# estimate the true alterantive test effect sizes----------------
if(m1 == 0){
test_effect_vec <- 0
} else {
test_effect_vec <-  sort(test, decreasing = TRUE)[1:m1]
}
# compute mean test effect----------
if(effectType == "continuous"){
mean_testEffect <- mean(test_effect_vec, na.rm = TRUE)
} else {
mean_testEffect <- median(test_effect_vec, na.rm = TRUE)
}
}
#check whether filter ranks probability is provided------------
if(!is.null(ranksProb)){
ranksProb <- ranksProb
} else {
message("computing ranks probabilities")
# compute the ranks probability of the tests given the mean effect
ranksProb <- prob_rank_givenEffect_emp(pvalue = pvalue, filter = filter,
group = group, h_breaks = h_breaks, effectType = effectType)
message("finished computing the ranks probabilities")
}
# compute the weights (always right-tailed)------------
message("computing weights")
if(effectType == "continuous"){
wgt = weight_continuous(alpha = alpha, et = mean_testEffect, m = group,
ranksProb = ranksProb)
} else {
wgt = weight_binary(alpha = alpha, et = mean_testEffect, m = group,
m1 = m1/m*group, ranksProb = ranksProb)
}
message("finished computing the weights")
}
wgt_all = rep(wgt, each = m/group)
message("comparing pvalues with thresholds")
if(method == "BH"){
padj <- p.adjust(OD_pvalue/wgt_all, method = "BH")
rejections_list = OD[which((padj <= alpha) == TRUE), ]
} else {
rejections_list = OD[which((OD_pvalue <= alpha*wgt_all/m) == TRUE), ]
}
# outputs--------------
n_rejections = dim(rejections_list)[1]
return(list(totalTests = m, nullProp = nullProp,
ranksProb = ranksProb, weight = wgt_all,
rejections = n_rejections, rejections_list = rejections_list))
}
library(tibble)
library(limma)
library(qvalue)
results <- empOPW(pvalue = pvals, filter = filters, effectType = "continuous",
method = "BH")
prob_rank_givenEffect_emp <- function(pvalue, filter, group = 5L, h_breaks = 101,
effectType = c("continuous", "binary"))
{
grpSize <- ceiling(length(pvalue)/group)
Data <- tibble(pvalue, filter)
OD <- Data[order(Data$filter, decreasing = TRUE), ]
OD_pvalue <- OD$pvalue
# function to compute ranks probbaility per group--------------
fun_prob <- function(group)
{
pval_perGrp <- OD_pvalue[(group*grpSize - grpSize + 1):(group*grpSize)]
if(effectType == "continuous"){
hist_dens <- hist(pval_perGrp, freq = FALSE,
breaks = seq(0, 1, length = h_breaks))$density
probAll = hist_dens/sum(hist_dens)
prob = probAll[1]
} else {
prob <- 1 - propTrueNull(p = pval_perGrp, method = "lfdr")
}
return(prob)
}
probVec <- sapply(1:group, fun_prob)
# smooting and nomalizing the ranks prob-------------
probVec_smooth <- smooth.spline(x = 1:group, y = probVec, df = 3)$y
probVec_smooth_norm <- probVec_smooth/sum(probVec_smooth, na.rm = TRUE)
return(probVec_smooth_norm)
}
results <- empOPW(pvalue = pvals, filter = filters, effectType = "continuous",
method = "BH")
libaray(OPWeight)
library(OPWeight)
results <- empOPW(pvalue = pvals, filter = filters, effectType = "continuous",
method = "BH")
et = mean(tests)
results
results2 <- empOPW(pvalue = pvals, filter = filters, mean_testEffect = et, tail = 2,
effectType = "continuous", method = "BH")
results2
results2 <- empOPW(pvalue = pvals, filter = filters, mean_testEffect = et, tail = 1,
effectType = "continuous", method = "BH")
results2
library(qvalue)
nullProp = qvalue(p = pvals, pi0.method = "bootstrap")$pi0
m0 = ceiling(nullProp*m)
m1 = m - m0
et = mean(sort(tests, decreasing = TRUE)[1:m1])
et
results2 <- empOPW(pvalue = pvals, filter = filters, mean_testEffect = et, tail = 1,
effectType = "continuous", method = "BH")
results2
results2 <- empOPW(pvalue = pvals, filter = filters, mean_testEffect = et,
tail = 2, effectType = "continuous", method = "BH")
results2
probs = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters, group = 5,
h_breaks = 101, effectType = "continuous")
probs
results3 <- empOPW(pvalue = pvals, filter = filters, ranksProb = probs,
effectType = "continuous", tail = 2, method = "BH")
results3
wgt <- weight_continuous(alpha = .05, et = et, m = m, ranksProb = probs)
wgt
results4 <- empOPW(pvalue = pvals, filter = filters, weight = wgt,
effectType = "continuous", alpha = .05, method = "BH")
results4
wgt <- weight_continuous(alpha = .05, et = et, m = grp, ranksProb = probs)
grp = 5
grp = 5
probs = prob_rank_givenEffect_emp(pvalue = pvals, filter = filters, group = grp,
h_breaks = 101, effectType = "continuous")
results3 <- empOPW(pvalue = pvals, filter = filters, ranksProb = probs,
effectType = "continuous", tail = 2, method = "BH")
# supply weight externally
wgt <- weight_continuous(alpha = .05, et = et, m = grp, ranksProb = probs)
results4 <- empOPW(pvalue = pvals, filter = filters, weight = wgt,
effectType = "continuous", alpha = .05, method = "BH")
results4
results3 <- opw(pvalue = pvals, filter = filters, ranksProb = probs,
ranks = FALSE, effectType = "continuous", tail = 2, method = "BH")
results3
probs <- sapply(ranks, prob_rank_givenEffect, et = ey, ey = ey,
nrep = 10000, m0 = m0, m1 = m1)
ranks <- 1:m
probs <- sapply(ranks, prob_rank_givenEffect, et = ey, ey = ey,
nrep = 10000, m0 = m0, m1 = m1)
mod <- lm(log(filters) ~ tests)
et = mean(tests)
ey = mod$coef[[1]] + mod$coef[[2]]*et
probs <- sapply(ranks, prob_rank_givenEffect, et = ey, ey = ey,
nrep = 10000, m0 = m0, m1 = m1)
results3 <- opw(pvalue = pvals, filter = filters, ranksProb = probs,
effectType = "continuous", tail = 2, method = "BH")
results3
wgt <- weight_continuous(alpha = .05, et = et, m = m, ranksProb = probs)
results4 <- opw(pvalue = pvals, filter = filters, weight = wgt,
effectType = "continuous", alpha = .05, method = "BH")
results4
rm(list=ls())
m = 10000
set.seed(3)
filters = runif(m, min = 0, max = 2.5)          # filter statistics
H = rbinom(m, size = 1, prob = 0.1)             # hypothesis true or false
tests = rnorm(m, mean = H * filters)            # Z-score
pvals = 1 - pnorm(tests)                        # pvalue
pvalue=pvals
m = length(pvalue)
nullProp = qvalue(p = pvalue, pi0.method = "bootstrap")$pi0
m0 = ceiling(nullProp*m)
m1 = m - m0
m1
m0
filter=filters
Data = tibble(pvalue, filter)
OD <- Data[order(Data$filter, decreasing = TRUE), ]
OD_pvalue <- OD$pvalue
OD_pvalue
OD
weight = NULL
ranksProb = NULL
mean_testEffect = NULL
alpha = .05
tail = 1L
delInterval = .0001
group = 5L
h_breaks = 101L
library(empOPW)
